#[~]
from turtle:

turtle.Turtle()
    design:
        .shape() -> sets the shape of the turtle.
        .color() -> sets color of turtle
        .penup() -> The turtle is up, so it doesn't mark on the screen 
                 -> use this for the snake head and it's segements.
        .pendown() -> The turtle is down, when it moves it leaves a mark. 
                   -> Use to write text with an invisible turtle
        .hideturtle() -> makes the turtle part invisible. 
                      -> Use this when writing text
        .write("text to write",align="",font=("",1,"")) -> I think this one allows you to write text on the screen.
        .clear()
    
    movement:
        .goto() -> takes a tuple: (x,y)
        .direction = ("up", "down", "left", "right")
        .forward(), .backward(), .right(), .left() -> Likely we'll only use .forward()
            -> Takes an int as argument for how many pixels to move in that direction. 
        .pos() -> returns the a tuple of the x,y coordinates as float.
        .speed() -> Will be setting speed to 0. Movement will be controlled by stepping using
        .xcor() -> returns the turtles current x-coordinate
        .ycor() -> returns the turtles current y-coordinate
        .setx(), .sety() -> sets x,y coordinates. 
        .distance() -> arg :: turtle.distance(other_turtle)

turtle.Screen()
    .title()
    .bgcolor()
    .setup()
    .tracer()
    .listen() -> use this before .onkeypress()
    .onkeypress() -> args: (someFunction, "<keytobind>") | When key is pressed do function.
    .update()

----------------------------------------------------

from time:

time.sleep() 

----------------------------------------------------

from random:

random.randint()
random.choice()